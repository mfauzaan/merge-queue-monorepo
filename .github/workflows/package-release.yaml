name: Package Release
run-name: ${{ inputs.package }} (${{ inputs.channel }})

on:
  workflow_dispatch:
    inputs:
      package:
        type: choice 
        description: package
        options: 
        - merge-queue
      channel:
        type: choice 
        description: release channel
        options: 
        - stable
        - beta

permissions: write-all

jobs:
  release:
    name: Release Package
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "lts/*"

      - name: Create the release
        env:
          DO_PUBLISH: ${{ inputs.channel == 'production' }}
          PACKAGE: ${{ inputs.package }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG_NAME=$(npm version patch --commit-hooks false --git-tag-version false)
          zip -r dist.zip ./$PACKAGE/dist

          release_args=(
            "$TAG_NAME"
            --title "${PACKAGE} ${TAG_NAME#v}"
            --target "$GITHUB_SHA"
            --generate-notes
          )

          if [[ $TAG_NAME == *-* ]]; then
            release_args+=( --prerelease )
          fi

          gh release create "${release_args[@]}" --
          git push

      # - name: Verify the integrity of provenance attestations and registry signatures for installed dependencies
      #   run: npm audit signatures

      # - name: Release
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   run: npx semantic-release -t 'v${version}-b${{ github.run_id }}.${{ github.run_number }}'
    # steps:
    #   - name: Checkout
    #     uses: actions/checkout@v4
    #     with:
    #       fetch-depth: 0

    #   - name: Semantic Release
    #     uses: cycjimmy/semantic-release-action@v4
    #     with:
    #       semantic_version: 23.1.1
    #       tag_format: v${version}-b${{ github.run_id }}.${{ github.run_number }}
    #     env:
    #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


